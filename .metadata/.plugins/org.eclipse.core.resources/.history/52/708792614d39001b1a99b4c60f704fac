#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>
#include "cudaInit.h"

__global__ void gpuAdd_scaler(int* d_a, int* d_b, int* d_c){
	*d_c = *d_a + *d_b;
}

int main(){
	int devCount, devID;
		cudaError_t errorDevCount = cudaGetDeviceCount(&devCount);
		if(!errorDevCount){
			printf("Error when enumerate device!\n");
			exit(-1);
		}

		printf("Device count:%d\n",devCount);

		cudaError_t errorDevGet = cudaGetDevice(&devID);
		if(!errorDevGet){
			printf("Error when get current device!\n");
			exit(-1);
		}
		printf("Current Device ID:%d\n",devID);

		cudaDeviceProp prop;
		cudaError_t errorDevProp = cudaGetDeviceProperties(&prop, devID);

		if(!errorDevProp){
			printf("Error when get device properties!\n");
			exit(-1);
		}
		printf("Current device's cc:%d\n",prop.major);

	int *h_a, *h_b, *h_c;
	*h_a = 1;
	*h_b = 2;

	int *d_a, *d_b, *d_c;

	//allocate memory for variables in gpu
	cudaMalloc((void**)&d_a, sizeof(int));
	cudaMalloc((void**)&d_b, sizeof(int));
	cudaMalloc((void**)&d_c, sizeof(int));

	//memory copy: from cpu to gpu
	cudaMemcpy(d_a,h_a,sizeof(int),cudaMemcpyHostToDevice);
	cudaMemcpy(d_b,h_b,sizeof(int),cudaMemcpyHostToDevice);

	//call kernel
	gpuAdd_scaler<<<1,1>>>(d_a,d_b,d_c);

	//memory copy: from gpu to cpu
	cudaMemcpy(h_c,d_c,sizeof(int),cudaMemcpyDeviceToHost);

	printf("Passing paramerter by reference output:%d + %d =%d", *h_a,*h_b,*h_c);

	//free memory
	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	return 0;

}
